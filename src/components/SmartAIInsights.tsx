'use client';

import React, { useState, useEffect } from 'react';
import { Brain, Zap, TrendingUp, AlertTriangle, Target, CheckCircle, Clock, DollarSign } from 'lucide-react';
import { businessAnalyzer, type SmartRecommendation, type BusinessMetrics, type BusinessInsight } from '@/lib/ai/businessAnalyzer';
import type { CargoItem, CalculationResult } from '@/types/calculation';

interface SmartAIInsightsProps {
  cargoItems: CargoItem[];
  calculationResult: CalculationResult | null;
  className?: string;
}

export default function SmartAIInsights({ cargoItems, calculationResult, className = '' }: SmartAIInsightsProps) {
  const [analysis, setAnalysis] = useState<{
    metrics: BusinessMetrics;
    recommendations: SmartRecommendation[];
    insights: BusinessInsight[];
  } | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [activeTab, setActiveTab] = useState<'recommendations' | 'insights' | 'coaching'>('recommendations');

  useEffect(() => {
    if (calculationResult && cargoItems.length > 0) {
      setIsAnalyzing(true);
      
      // –°–∏–º—É–ª—è—Ü—ñ—è AI –∞–Ω–∞–ª—ñ–∑—É
      setTimeout(() => {
        const result = businessAnalyzer.analyzeBusinessSituation(cargoItems, calculationResult);
        setAnalysis(result);
        setIsAnalyzing(false);
      }, 1500);
    }
  }, [cargoItems, calculationResult]);

  if (!calculationResult || cargoItems.length === 0) {
    return (
      <div className={`bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700 ${className}`}>
        <div className="text-center py-8">
          <Brain className="w-12 h-12 text-gray-500 mx-auto mb-4" />
          <h3 className="text-gray-400 font-medium mb-2">AI –ê–Ω–∞–ª—ñ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π</h3>
          <p className="text-gray-500 text-sm">–î–æ–¥–∞–π—Ç–µ –≤–∞–Ω—Ç–∞–∂ –¥–ª—è —Ä–æ–∑—É–º–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É</p>
        </div>
      </div>
    );
  }

  if (isAnalyzing) {
    return (
      <div className={`bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700 ${className}`}>
        <div className="text-center py-8">
          <div className="relative w-16 h-16 mx-auto mb-4">
            <Brain className="w-16 h-16 text-blue-400 animate-pulse" />
            <div className="absolute inset-0 bg-blue-400/20 rounded-full animate-ping"></div>
          </div>
          <h3 className="text-white font-bold mb-2">üß† AI –∞–Ω–∞–ª—ñ–∑—É—î –≤–∞—à –±—ñ–∑–Ω–µ—Å...</h3>
          <p className="text-blue-300 text-sm mb-4">–†–æ–∑—É–º–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö</p>
          <div className="flex justify-center space-x-1">
            <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce"></div>
            <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
            <div className="w-2 h-2 bg-cyan-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
          </div>
        </div>
      </div>
    );
  }

  if (!analysis) {
    return (
      <div className={`bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700 ${className}`}>
        <div className="text-center py-8">
          <AlertTriangle className="w-12 h-12 text-yellow-500 mx-auto mb-4" />
          <h3 className="text-yellow-400 font-medium mb-2">–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É</h3>
          <p className="text-gray-500 text-sm">–°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ</p>
        </div>
      </div>
    );
  }

  const getScoreColor = (score: number): string => {
    if (score >= 80) return 'text-green-400';
    if (score >= 60) return 'text-yellow-400';
    if (score >= 40) return 'text-orange-400';
    return 'text-red-400';
  };

  const getScoreBg = (score: number): string => {
    if (score >= 80) return 'bg-green-500/20 border-green-500/30';
    if (score >= 60) return 'bg-yellow-500/20 border-yellow-500/30';
    if (score >= 40) return 'bg-orange-500/20 border-orange-500/30';
    return 'bg-red-500/20 border-red-500/30';
  };

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case 'critical': return 'üî¥';
      case 'high': return 'üü†';
      case 'medium': return 'üü°';
      case 'low': return 'üü¢';
      default: return '‚ö™';
    }
  };

  const getInsightIcon = (type: string) => {
    switch (type) {
      case 'opportunity': return 'üéØ';
      case 'threat': return '‚ö†Ô∏è';
      case 'optimization': return '‚ö°';
      case 'warning': return 'üö®';
      default: return 'üí°';
    }
  };

  return (
    <div className={`bg-gray-900/50 backdrop-blur-sm rounded-xl border border-gray-700 ${className}`}>
      {/* Header */}
      <div className="p-6 border-b border-gray-700">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-3">
            <div className="relative">
              <Brain className="w-6 h-6 text-blue-400" />
              <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
            </div>
            <div>
              <h2 className="text-lg font-bold text-white">Smart AI –†–∞–¥–Ω–∏–∫</h2>
              <p className="text-xs text-gray-400">–†–æ–∑—É–º–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</p>
            </div>
          </div>
          
          <div className="text-right">
            <div className="text-2xl font-bold text-green-400">
              {analysis.metrics.profitabilityScore}
            </div>
            <div className="text-xs text-gray-400">AI Score</div>
          </div>
        </div>

        {/* AI Metrics Dashboard */}
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-3">
          <div className={`p-3 rounded-lg border ${getScoreBg(analysis.metrics.profitabilityScore)}`}>
            <div className="flex items-center gap-2 mb-1">
              <DollarSign className="w-4 h-4" />
              <span className="text-xs font-medium">–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å</span>
            </div>
            <div className={`text-lg font-bold ${getScoreColor(analysis.metrics.profitabilityScore)}`}>
              {analysis.metrics.profitabilityScore}/100
            </div>
          </div>

          <div className={`p-3 rounded-lg border ${getScoreBg(analysis.metrics.efficiencyScore)}`}>
            <div className="flex items-center gap-2 mb-1">
              <Zap className="w-4 h-4" />
              <span className="text-xs font-medium">–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</span>
            </div>
            <div className={`text-lg font-bold ${getScoreColor(analysis.metrics.efficiencyScore)}`}>
              {analysis.metrics.efficiencyScore}/100
            </div>
          </div>

          <div className={`p-3 rounded-lg border ${getScoreBg(100 - analysis.metrics.riskScore)}`}>
            <div className="flex items-center gap-2 mb-1">
              <Target className="w-4 h-4" />
              <span className="text-xs font-medium">–ë–µ–∑–ø–µ–∫–∞</span>
            </div>
            <div className={`text-lg font-bold ${getScoreColor(100 - analysis.metrics.riskScore)}`}>
              {100 - analysis.metrics.riskScore}/100
            </div>
          </div>

          <div className={`p-3 rounded-lg border ${getScoreBg(analysis.metrics.competitivenessScore)}`}>
            <div className="flex items-center gap-2 mb-1">
              <TrendingUp className="w-4 h-4" />
              <span className="text-xs font-medium">–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è</span>
            </div>
            <div className={`text-lg font-bold ${getScoreColor(analysis.metrics.competitivenessScore)}`}>
              {analysis.metrics.competitivenessScore}/100
            </div>
          </div>
        </div>

        {/* Tabs */}
        <div className="flex bg-gray-800/50 rounded-lg p-1 mt-4">
          {(['recommendations', 'insights', 'coaching'] as const).map((tab) => (
            <button
              key={tab}
              onClick={() => setActiveTab(tab)}
              className={`flex-1 px-3 py-2 text-xs rounded transition-all ${
                activeTab === tab
                  ? 'bg-blue-500/20 text-blue-300 border border-blue-500/30'
                  : 'text-gray-400 hover:text-white hover:bg-gray-700/50'
              }`}
            >
              {tab === 'recommendations' && 'üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó'}
              {tab === 'insights' && 'üéØ –Ü–Ω—Å–∞–π—Ç–∏'}
              {tab === 'coaching' && 'ü§ñ AI –ö–æ—É—á'}
            </button>
          ))}
        </div>
      </div>

      {/* Content */}
      <div className="p-6">
        {activeTab === 'recommendations' && (
          <div className="space-y-4">
            {analysis.recommendations.length > 0 ? (
              analysis.recommendations.map((rec, index) => (
                <div key={rec.id} className="bg-gray-800/30 border border-gray-600 rounded-lg p-4 hover:border-blue-500/50 transition-all">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-center gap-2">
                      <span className="text-lg">{getPriorityIcon(rec.priority)}</span>
                      <h3 className="font-semibold text-white text-sm">{rec.title}</h3>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="text-xs bg-blue-500/20 text-blue-300 px-2 py-1 rounded">
                        {rec.confidence}% –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
                      </div>
                      <Clock className="w-4 h-4 text-gray-400" />
                      <span className="text-xs text-gray-400">{rec.implementationTime}</span>
                    </div>
                  </div>
                  
                  <p className="text-gray-300 text-sm mb-3">{rec.description}</p>
                  
                  <div className="bg-blue-500/10 border border-blue-500/20 rounded p-3 mb-3">
                    <h4 className="text-blue-300 font-medium text-xs mb-1">üí° –î—ñ—è:</h4>
                    <p className="text-blue-200 text-sm">{rec.actionable}</p>
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="text-green-400 font-bold text-sm">
                      üí∞ –ï–∫–æ–Ω–æ–º—ñ—è: {rec.potentialSavings.toLocaleString()} ‚Ç¥
                    </div>
                    <div className="text-orange-300 text-sm">
                      {rec.impact}
                    </div>
                  </div>

                  {rec.reasoning.length > 0 && (
                    <details className="mt-3">
                      <summary className="text-xs text-gray-400 cursor-pointer hover:text-white">
                        üß† AI –æ–±“ë—Ä—É–Ω—Ç—É–≤–∞–Ω–Ω—è
                      </summary>
                      <ul className="mt-2 space-y-1 text-xs text-gray-300 ml-4">
                        {rec.reasoning.map((reason, i) => (
                          <li key={i} className="flex items-start gap-2">
                            <span className="text-cyan-400 mt-1">‚Ä¢</span>
                            <span>{reason}</span>
                          </li>
                        ))}
                      </ul>
                    </details>
                  )}
                </div>
              ))
            ) : (
              <div className="text-center py-8">
                <CheckCircle className="w-12 h-12 text-green-400 mx-auto mb-4" />
                <h3 className="text-green-400 font-medium mb-2">–í—ñ–¥–º—ñ–Ω–Ω–∞ —Ä–æ–±–æ—Ç–∞!</h3>
                <p className="text-gray-500 text-sm">AI –Ω–µ –∑–Ω–∞–π—à–æ–≤ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó</p>
              </div>
            )}
          </div>
        )}

        {activeTab === 'insights' && (
          <div className="space-y-4">
            {analysis.insights.map((insight, index) => (
              <div key={index} className="bg-gray-800/30 border border-gray-600 rounded-lg p-4">
                <div className="flex items-start gap-3">
                  <span className="text-xl">{getInsightIcon(insight.type)}</span>
                  <div className="flex-1">
                    <p className="text-white text-sm font-medium">{insight.message}</p>
                    {insight.actionRequired && (
                      <div className="mt-2 text-xs bg-yellow-500/20 text-yellow-300 px-2 py-1 rounded inline-block">
                        ‚ö° –ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥—ñ—è
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {activeTab === 'coaching' && (
          <div className="space-y-4">
            <div className="bg-gradient-to-r from-green-500/10 to-emerald-500/10 border border-green-500/20 rounded-lg p-4">
              <h3 className="text-green-300 font-semibold mb-2 flex items-center gap-2">
                <CheckCircle className="w-5 h-5" />
                üéØ –í–∞—à—ñ —Å–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏
              </h3>
              <div className="space-y-2">
                {analysis.metrics.profitabilityScore > 70 && (
                  <div className="text-green-200 text-sm">‚Ä¢ –í–∏—Å–æ–∫–∞ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å - –≤–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤</div>
                )}
                {analysis.metrics.efficiencyScore > 70 && (
                  <div className="text-green-200 text-sm">‚Ä¢ –í—ñ–¥–º—ñ–Ω–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</div>
                )}
                {analysis.metrics.competitivenessScore > 70 && (
                  <div className="text-green-200 text-sm">‚Ä¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø—Ä–æ–º–æ–∂–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏</div>
                )}
              </div>
            </div>

            <div className="bg-gradient-to-r from-yellow-500/10 to-orange-500/10 border border-yellow-500/20 rounded-lg p-4">
              <h3 className="text-yellow-300 font-semibold mb-2 flex items-center gap-2">
                <Target className="w-5 h-5" />
                üéØ –ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è —Ä–æ—Å—Ç—É
              </h3>
              <div className="space-y-2">
                <div className="text-yellow-200 text-sm">‚Ä¢ –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–∂–µ –¥–æ–¥–∞—Ç–∏ –¥–æ—Ö–æ–¥—É</div>
                <div className="text-yellow-200 text-sm">‚Ä¢ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∑–º–µ–Ω—à–∏—Ç—å –≤–∏—Ç—Ä–∞—Ç–∏</div>
                <div className="text-yellow-200 text-sm">‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—ñ –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ü—ñ–Ω</div>
              </div>
            </div>

            <div className="bg-gradient-to-r from-blue-500/10 to-purple-500/10 border border-blue-500/20 rounded-lg p-4">
              <h3 className="text-blue-300 font-semibold mb-2 flex items-center gap-2">
                <Brain className="w-5 h-5" />
                üöÄ –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏
              </h3>
              <div className="space-y-2">
                <div className="text-blue-200 text-sm">üìä –í–ø—Ä–æ–≤–∞–¥–∏—Ç–∏ —â–æ—Ç–∏–∂–Ω–µ–≤–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ KPI</div>
                <div className="text-blue-200 text-sm">üéØ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ü—ñ–ª—å–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –Ω–∞ –∫–≤–∞—Ä—Ç–∞–ª</div>
                <div className="text-blue-200 text-sm">ü§ù –†–æ–∑—à–∏—Ä–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç—Å—å–∫—É –±–∞–∑—É</div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Footer */}
      <div className="px-6 py-3 border-t border-gray-700 bg-gray-800/30">
        <div className="flex items-center justify-between">
          <p className="text-xs text-gray-500">
            üß† Powered by EuroTandemFORCE AI ‚Ä¢ –û–Ω–æ–≤–ª–µ–Ω–æ —â–æ–π–Ω–æ
          </p>
          <div className="flex items-center gap-2 text-xs text-gray-500">
            <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
            AI –∞–∫—Ç–∏–≤–Ω–∏–π
          </div>
        </div>
      </div>
    </div>
  );
} 