import axios from 'axios';
import { getRouteCoordinates } from './geocoding';

export interface RouteData {
  coordinates: [number, number][]; // [lng, lat]
  distance: number; // –≤ –º–µ—Ç—Ä–∞—Ö
  duration: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
}

/**
 * –û—Ç—Ä–∏–º—É—î –º–∞—Ä—à—Ä—É—Ç –º—ñ–∂ –¥–≤–æ–º–∞ –º—ñ—Å—Ç–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –≥–µ–æ–∫–æ–¥—ñ–Ω–≥
 */
export async function getRoute(fromCity: string, toCity: string): Promise<RouteData> {
  console.log(`üõ£Ô∏è Getting route from ${fromCity} to ${toCity}`);
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –º—ñ—Å—Ç —á–µ—Ä–µ–∑ –≥–µ–æ–∫–æ–¥—ñ–Ω–≥ API
  const { from, to } = await getRouteCoordinates(fromCity, toCity);
  
  console.log(`üìç Coordinates found:`, {
    from: from ? `${from.lat}, ${from.lng} (${from.country})` : 'null',
    to: to ? `${to.lat}, ${to.lng} (${to.country})` : 'null'
  });
  
  if (!from || !to) {
    console.warn(`‚ùå Could not find coordinates for cities: ${fromCity} -> ${from?.country}, ${toCity} -> ${to?.country}`);
    
    // Fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –£–∫—Ä–∞—ó–Ω–∏/–Ñ–≤—Ä–æ–ø–∏
    const defaultFrom: [number, number] = from ? [from.lng, from.lat] : [30.5234, 50.4501]; // –ö–∏—ó–≤
    const defaultTo: [number, number] = to ? [to.lng, to.lat] : [13.4050, 52.5200]; // –ë–µ—Ä–ª—ñ–Ω
    const estimatedDistance = calculateStraightLineDistance(defaultFrom, defaultTo) * 1000 * 1.5;
    
    return {
      coordinates: [defaultFrom, defaultTo],
      distance: estimatedDistance,
      duration: Math.round(estimatedDistance / 1000 * 50)
    };
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç [lng, lat] –¥–ª—è API
  const fromCoords: [number, number] = [from.lng, from.lat];
  const toCoords: [number, number] = [to.lng, to.lat];

  try {
    // –°–ø—Ä–æ–±—É—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É OSRM API (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —ñ –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –∫–ª—é—á–∞)
    try {
      console.log(`üîÑ Trying OSRM API for ${fromCity} -> ${toCity}`);
      const response = await axios.get(
        `https://router.project-osrm.org/route/v1/driving/${fromCoords[0]},${fromCoords[1]};${toCoords[0]},${toCoords[1]}`,
        {
          params: {
            overview: 'full',
            geometries: 'geojson'
          },
          timeout: 8000,
        }
      );

      if (response.data?.routes?.[0]) {
        const route = response.data.routes[0];
        const coordinates = route.geometry.coordinates;
        
        console.log(`‚úÖ OSRM success: ${coordinates.length} points, ${Math.round(route.distance/1000)}km`);

        return {
          coordinates: coordinates,
          distance: Math.round(route.distance || 0),
          duration: Math.round(route.duration || 0)
        };
      }
    } catch (osrmError) {
      console.warn('‚ö†Ô∏è OSRM API error, trying MapBox...', osrmError);
      
      // Fallback –¥–æ MapBox API
      try {
        console.log(`üîÑ Trying MapBox API for ${fromCity} -> ${toCity}`);
        const response = await axios.get(
          `https://api.mapbox.com/directions/v5/mapbox/driving/${fromCoords[0]},${fromCoords[1]};${toCoords[0]},${toCoords[1]}`,
          {
            params: {
              geometries: 'geojson',
              access_token: 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw'
            },
            timeout: 8000,
          }
        );

        if (response.data?.routes?.[0]) {
          const route = response.data.routes[0];
          const coordinates = route.geometry.coordinates;
          
          console.log(`‚úÖ MapBox success: ${coordinates.length} points, ${Math.round(route.distance/1000)}km`);

          return {
            coordinates: coordinates,
            distance: Math.round(route.distance || 0),
            duration: Math.round(route.duration || 0)
          };
        }
      } catch (mapboxError) {
        console.warn('‚ö†Ô∏è MapBox API also failed:', mapboxError);
      }
    }
  } catch (error) {
    console.warn('‚ùå All routing APIs failed:', error);
  }

  // –Ø–∫—â–æ –≤—Å—ñ API –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä—è–º—É –ª—ñ–Ω—ñ—é –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
  console.log(`üìè Using straight line fallback for ${fromCity} -> ${toCity}`);
  const straightDistance = calculateStraightLineDistance(fromCoords, toCoords) * 1000 * 1.3; // +30% –¥–ª—è –¥–æ—Ä–æ–∂–Ω—ñ—Ö —É–º–æ–≤
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä—è–º–∏–π –º–∞—Ä—à—Ä—É—Ç –∑ –ø—Ä–æ–º—ñ–∂–Ω–∏–º–∏ —Ç–æ—á–∫–∞–º–∏
  const midPoint: [number, number] = [
    (fromCoords[0] + toCoords[0]) / 2,
    (fromCoords[1] + toCoords[1]) / 2
  ];
  
  return {
    coordinates: [fromCoords, midPoint, toCoords],
    distance: straightDistance,
    duration: Math.round(straightDistance / 1000 * 50) // –ø—Ä–∏–±–ª–∏–∑–Ω–æ 50 –∫–º/–≥–æ–¥
  };
}

/**
 * –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –ø—Ä—è–º—É –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —Ç–æ—á–∫–∞–º–∏ –∑–∞ —Ñ–æ—Ä–º—É–ª–æ—é –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞
 */
function calculateStraightLineDistance(
  [lng1, lat1]: [number, number], 
  [lng2, lat2]: [number, number]
): number {
  const R = 6371; // –†–∞–¥—ñ—É—Å –ó–µ–º–ª—ñ –≤ –∫–º
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLng = (lng2 - lng1) * Math.PI / 180;
  const a = 
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
    Math.sin(dLng / 2) * Math.sin(dLng / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
}

/**
 * –ö–µ—à—É–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
 */
const routeCache = new Map<string, RouteData>();

export async function getCachedRoute(fromCity: string, toCity: string): Promise<RouteData> {
  const cacheKey = `${fromCity.toLowerCase()}-${toCity.toLowerCase()}`;
  
  console.log(`üíæ getCachedRoute: ${cacheKey}`);
  
  if (routeCache.has(cacheKey)) {
    console.log(`üéØ Route found in cache: ${cacheKey}`);
    return routeCache.get(cacheKey)!;
  }
  
  console.log(`üÜï Route not cached, fetching: ${cacheKey}`);
  const route = await getRoute(fromCity, toCity);
  routeCache.set(cacheKey, route);
  
  console.log(`üíæ Route cached: ${cacheKey}, ${Math.round(route.distance/1000)}km, ${route.coordinates.length} points`);
  return route;
}

/**
 * –û—á–∏—â–∞—î –∫–µ—à –º–∞—Ä—à—Ä—É—Ç—ñ–≤
 */
export function clearRouteCache(): void {
  routeCache.clear();
  console.log('üßπ Route cache cleared');
} 