// üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ª–æ–≥—ñ—Å—Ç–∏–∫–∏
import type { AIHistoricalData, AIRecommendation } from './index';
import { FuelCostPredictor } from './fuelPredictor';
import { RouteOptimizer } from './routeOptimizer';
import { AnomalyDetector } from './anomalyDetector';
import { PriceOptimizer } from './priceOptimizer';

export class RouteRecommendationEngine {
  private fuelPredictor: FuelCostPredictor;
  private routeOptimizer: RouteOptimizer;
  private anomalyDetector: AnomalyDetector;
  private priceOptimizer: PriceOptimizer;

  constructor(historicalData: AIHistoricalData[] = []) {
    this.fuelPredictor = new FuelCostPredictor(historicalData);
    this.routeOptimizer = new RouteOptimizer(historicalData);
    this.anomalyDetector = new AnomalyDetector(historicalData);
    this.priceOptimizer = new PriceOptimizer(historicalData);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –±—ñ–∑–Ω–µ—Å—É
   */
  generateBusinessRecommendations(): AIRecommendation[] {
    const recommendations: AIRecommendation[] = [];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö
    recommendations.push(...this.routeOptimizer.getRouteRecommendations());

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—é
    recommendations.push(...this.priceOptimizer.analyzeClientProfitability());

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–æ–º–∞–ª—ñ–π
    const anomalyReport = this.anomalyDetector.getAnomalyReport();
    recommendations.push(...anomalyReport.recommendations);

    // –ó–∞–≥–∞–ª—å–Ω—ñ –±—ñ–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    recommendations.push(...this.generateGeneralRecommendations());

    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º
    return recommendations.sort((a, b) => {
      const priorityOrder = { high: 3, medium: 2, low: 1 };
      return priorityOrder[b.priority] - priorityOrder[a.priority];
    });
  }

  /**
   * –ê–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –æ–ø–µ—Ä–∞—Ü—ñ–π
   */
  analyzeOperationalEfficiency(): {
    score: number;
    metrics: {
      fuelEfficiency: number;
      timeEfficiency: number;
      costEfficiency: number;
      routeOptimization: number;
    };
    recommendations: string[];
  } {
    const stats = this.fuelPredictor.getStatistics();
    
    if (!stats) {
      return {
        score: 50,
        metrics: {
          fuelEfficiency: 50,
          timeEfficiency: 50,
          costEfficiency: 50,
          routeOptimization: 50
        },
        recommendations: ['–î–æ–¥–∞–π—Ç–µ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ']
      };
    }

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    const avgFuelPerKm = stats.averageFuelCost / stats.averageDistance;
    const fuelEfficiency = Math.max(0, Math.min(100, 100 - (avgFuelPerKm - 8) * 10)); // –æ–ø—Ç–∏–º—É–º 8 –≥—Ä–Ω/–∫–º

    // –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
    const overallScore = fuelEfficiency; // –ø–æ–∫–∏ —â–æ —Ç—ñ–ª—å–∫–∏ –ø–∞–ª–∏–≤–æ, –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ –º–µ—Ç—Ä–∏–∫–∏

    const recommendations: string[] = [];
    
    if (fuelEfficiency < 70) {
      recommendations.push('–û–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ –≤–∏—Ç—Ä–∞—Ç–∏ –ø–∞–ª–∏–≤–∞ —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω—ñ—á–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–ø–∞—Ä–∫—É');
    }
    
    if (overallScore > 80) {
      recommendations.push('–í—ñ–¥–º—ñ–Ω–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ');
    }

    return {
      score: Math.round(overallScore),
      metrics: {
        fuelEfficiency: Math.round(fuelEfficiency),
        timeEfficiency: 75, // –∑–∞–≥–ª—É—à–∫–∞
        costEfficiency: 70, // –∑–∞–≥–ª—É—à–∫–∞
        routeOptimization: 80 // –∑–∞–≥–ª—É—à–∫–∞
      },
      recommendations
    };
  }

  /**
   * –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω–¥—ñ–≤
   */
  predictTrends(months: number = 3): {
    fuelCostTrend: 'increasing' | 'stable' | 'decreasing';
    demandTrend: 'growing' | 'stable' | 'declining';
    profitabilityTrend: 'improving' | 'stable' | 'declining';
    recommendations: AIRecommendation[];
  } {
    // –ü—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç—É—Ç –±—É–≤ –±–∏ –±—ñ–ª—å—à —Å–∫–ª–∞–¥–Ω–∏–π –∞–Ω–∞–ª—ñ–∑

    const recommendations: AIRecommendation[] = [];

    // –°–∏–º—É–ª—è—Ü—ñ—è —Ç—Ä–µ–Ω–¥—ñ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ - –∞–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö)
    const fuelCostTrend: 'increasing' | 'stable' | 'decreasing' = 'increasing';
    
    if (fuelCostTrend === 'increasing') {
      recommendations.push({
        type: 'fuel',
        priority: 'high',
        title: '–ó—Ä–æ—Å—Ç–∞–Ω–Ω—è —Ü—ñ–Ω –Ω–∞ –ø–∞–ª–∏–≤–æ',
        description: '–ü—Ä–æ–≥–Ω–æ–∑—É—î—Ç—å—Å—è –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è —Ü—ñ–Ω –Ω–∞ –ø–∞–ª–∏–≤–æ. –†–æ–∑–≥–ª—è–Ω—å—Ç–µ —Ñ—ñ–∫—Å–∞—Ü—ñ—é —Ü—ñ–Ω –Ω–∞ –ø–æ—Å–ª—É–≥–∏ –∞–±–æ —Ö–µ–¥–∂—É–≤–∞–Ω–Ω—è —Ä–∏–∑–∏–∫—ñ–≤.',
        expectedSaving: 5000,
        currency: 'UAH'
      });
    }

    return {
      fuelCostTrend,
      demandTrend: 'stable',
      profitabilityTrend: 'stable',
      recommendations
    };
  }

  /**
   * –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É
   */
  getRouteSpecificRecommendations(
    from: string,
    to: string,
    cargoWeight: number,
    urgency: string
  ): AIRecommendation[] {
    const recommendations: AIRecommendation[] = [];

    // –ê–Ω–∞–ª—ñ–∑ —Ü—å–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É
    const routeAnalysis = this.routeOptimizer.analyzeHistoricalRoutes(from, to);
    
    if (routeAnalysis && routeAnalysis.confidence > 0.7) {
      if (routeAnalysis.predicted > 2000) {
        recommendations.push({
          type: 'route',
          priority: 'medium',
          title: '–î–æ—Ä–æ–≥–∏–π –º–∞—Ä—à—Ä—É—Ç',
          description: '–¶–µ–π –º–∞—Ä—à—Ä—É—Ç –º–∞—î –≤–∏—Å–æ–∫—ñ –≤–∏—Ç—Ä–∞—Ç–∏. –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∞–±–æ –ø—ñ–¥–≤–∏—â—Ç–µ —Ç–∞—Ä–∏—Ñ.',
          expectedSaving: 500,
          currency: 'UAH'
        });
      }
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –≤–∞–∑—ñ –≤–∞–Ω—Ç–∞–∂—É
    if (cargoWeight > 20000) {
      recommendations.push({
        type: 'route',
        priority: 'low',
        title: '–í–∞–∂–∫–∏–π –≤–∞–Ω—Ç–∞–∂',
        description: '–í–∞–∂–∫–∏–π –≤–∞–Ω—Ç–∞–∂ –∑–±—ñ–ª—å—à—É—î –≤–∏—Ç—Ä–∞—Ç–∏ –ø–∞–ª–∏–≤–∞. –í—Ä–∞—Ö—É–π—Ç–µ —Ü–µ –≤ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—ñ.',
        expectedSaving: 300,
        currency: 'UAH'
      });
    }

    return recommendations;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
   */
  private generateGeneralRecommendations(): AIRecommendation[] {
    const recommendations: AIRecommendation[] = [];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –ø–æ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
    const stats = this.fuelPredictor.getStatistics();
    if (!stats || stats.totalTrips < 10) {
      recommendations.push({
        type: 'route',
        priority: 'medium',
        title: '–ó–±—ñ—Ä —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö',
        description: '–î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ç–æ—á–Ω–æ—Å—Ç—ñ AI –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤.',
        expectedSaving: 1000,
        currency: 'UAH'
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
    if (stats && stats.totalTrips > 50) {
      recommendations.push({
        type: 'route',
        priority: 'low',
        title: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –ø—Ä–æ—Ü–µ—Å—ñ–≤',
        description: '–£ –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤.',
        expectedSaving: 2000,
        currency: 'UAH'
      });
    }

    return recommendations;
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —à–≤–∏–¥–∫–∏—Ö —ñ–Ω—Å–∞–π—Ç—ñ–≤
   */
  getQuickInsights(): {
    totalTrips: number;
    averageProfitability: number;
    topRoute: string | null;
    riskLevel: 'low' | 'medium' | 'high';
    nextRecommendation: string;
  } {
    const stats = this.fuelPredictor.getStatistics();
    const anomalyReport = this.anomalyDetector.getAnomalyReport();

    if (!stats) {
      return {
        totalTrips: 0,
        averageProfitability: 0,
        topRoute: null,
        riskLevel: 'medium',
        nextRecommendation: '–ü–æ—á–Ω—ñ—Ç—å –∑–±–∏—Ä–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ —Ä–µ–π—Å–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É'
      };
    }

    // –ü—Ä–æ—Å—Ç–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ
    const avgRevenue = stats.averageFuelCost * 2; // –ø—Ä–∏–ø—É—â–µ–Ω–Ω—è
    const avgProfit = avgRevenue - stats.averageFuelCost;
    const avgProfitability = (avgProfit / avgRevenue) * 100;

    // –û—Ü—ñ–Ω–∫–∞ —Ä–∏–∑–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–æ–º–∞–ª—ñ–π
    let riskLevel: 'low' | 'medium' | 'high' = 'low';
    if (anomalyReport.totalAnomalies > 10) riskLevel = 'medium';
    if (anomalyReport.totalAnomalies > 20) riskLevel = 'high';

    return {
      totalTrips: stats.totalTrips,
      averageProfitability: Math.round(avgProfitability),
      topRoute: '–ö–∏—ó–≤ ‚Üí –õ—å–≤—ñ–≤', // –∑–∞–≥–ª—É—à–∫–∞
      riskLevel,
      nextRecommendation: this.getNextActionRecommendation(stats, anomalyReport)
    };
  }

  /**
   * –ù–∞—Å—Ç—É–ø–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –¥—ñ—è
   */
  private getNextActionRecommendation(stats: any, anomalyReport: any): string {
    if (stats.totalTrips < 5) {
      return '–î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É';
    }

    if (anomalyReport.totalAnomalies > 5) {
      return '–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ –≤–∏—è–≤–ª–µ–Ω—ñ –∞–Ω–æ–º–∞–ª—ñ—ó —É –≤–∏—Ç—Ä–∞—Ç–∞—Ö';
    }

    if (stats.averageFuelCost / stats.averageDistance > 12) {
      return '–û–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ –≤–∏—Ç—Ä–∞—Ç–∏ –ø–∞–ª–∏–≤–∞ - –≤–æ–Ω–∏ –≤–∏—â–µ —Å–µ—Ä–µ–¥–Ω—ñ—Ö';
    }

    return '–í—Å–µ –≤–∏–≥–ª—è–¥–∞—î –¥–æ–±—Ä–µ! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –∑–±–∏—Ä–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤';
  }
} 