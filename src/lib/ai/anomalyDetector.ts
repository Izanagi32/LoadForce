// üö® –í–∏—è–≤–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π —É –≤–∏—Ç—Ä–∞—Ç–∞—Ö —Ç–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è—Ö
import type { AIHistoricalData, AIRecommendation } from './index';

export interface Anomaly {
  id: string;
  type: 'fuel' | 'time' | 'distance' | 'cost';
  severity: 'low' | 'medium' | 'high';
  description: string;
  expectedValue: number;
  actualValue: number;
  deviation: number;
  date: string;
  route: {
    from: string;
    to: string;
  };
  suggestions: string[];
}

export class AnomalyDetector {
  private historicalData: AIHistoricalData[] = [];
  private thresholds = {
    fuel: { moderate: 1.5, severe: 2.0 }, // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
    time: { moderate: 1.3, severe: 1.8 },
    distance: { moderate: 1.2, severe: 1.5 },
    cost: { moderate: 1.4, severe: 2.0 }
  };

  constructor(data?: AIHistoricalData[]) {
    if (data) {
      this.historicalData = data;
    }
  }

  /**
   * –í–∏—è–≤–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π —É –Ω–æ–≤–æ–º—É —Ä–µ–π—Å—ñ
   */
  detectAnomalies(newTrip: AIHistoricalData): Anomaly[] {
    const anomalies: Anomaly[] = [];

    // –ê–Ω–∞–ª—ñ–∑ –≤–∏—Ç—Ä–∞—Ç –ø–∞–ª–∏–≤–∞
    const fuelAnomaly = this.detectFuelAnomaly(newTrip);
    if (fuelAnomaly) anomalies.push(fuelAnomaly);

    // –ê–Ω–∞–ª—ñ–∑ —á–∞—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏
    const timeAnomaly = this.detectTimeAnomaly(newTrip);
    if (timeAnomaly) anomalies.push(timeAnomaly);

    // –ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥—Å—Ç–∞–Ω—ñ
    const distanceAnomaly = this.detectDistanceAnomaly(newTrip);
    if (distanceAnomaly) anomalies.push(distanceAnomaly);

    // –ê–Ω–∞–ª—ñ–∑ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç
    const costAnomaly = this.detectCostAnomaly(newTrip);
    if (costAnomaly) anomalies.push(costAnomaly);

    return anomalies;
  }

  /**
   * –í–∏—è–≤–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π —É –≤–∏—Ç—Ä–∞—Ç–∞—Ö –ø–∞–ª–∏–≤–∞
   */
  private detectFuelAnomaly(trip: AIHistoricalData): Anomaly | null {
    const similarTrips = this.findSimilarTrips(trip);
    if (similarTrips.length < 3) return null;

    const stats = this.calculateStatistics(similarTrips.map(t => t.fuelCost));
    const zScore = Math.abs((trip.fuelCost - stats.mean) / stats.stdDev);

    if (zScore > this.thresholds.fuel.moderate) {
      const severity = zScore > this.thresholds.fuel.severe ? 'high' : 'medium';
      
      return {
        id: `fuel-${trip.id}`,
        type: 'fuel',
        severity,
        description: `–í–∏—Ç—Ä–∞—Ç–∏ –ø–∞–ª–∏–≤–∞ ${trip.fuelCost} –≥—Ä–Ω –∑–Ω–∞—á–Ω–æ –≤—ñ–¥—Ä—ñ–∑–Ω—è—é—Ç—å—Å—è –≤—ñ–¥ –æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö ${Math.round(stats.mean)} –≥—Ä–Ω`,
        expectedValue: Math.round(stats.mean),
        actualValue: trip.fuelCost,
        deviation: Math.round(((trip.fuelCost - stats.mean) / stats.mean) * 100),
        date: trip.date,
        route: trip.route,
        suggestions: this.generateFuelSuggestions(trip, stats.mean)
      };
    }

    return null;
  }

  /**
   * –í–∏—è–≤–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π —É —á–∞—Å—ñ –¥–æ—Å—Ç–∞–≤–∫–∏
   */
  private detectTimeAnomaly(trip: AIHistoricalData): Anomaly | null {
    const similarTrips = this.findSimilarTrips(trip);
    if (similarTrips.length < 3) return null;

    const stats = this.calculateStatistics(similarTrips.map(t => t.deliveryTime));
    const zScore = Math.abs((trip.deliveryTime - stats.mean) / stats.stdDev);

    if (zScore > this.thresholds.time.moderate) {
      const severity = zScore > this.thresholds.time.severe ? 'high' : 'medium';
      
      return {
        id: `time-${trip.id}`,
        type: 'time',
        severity,
        description: `–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏ ${trip.deliveryTime} –≥–æ–¥ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ –æ—á—ñ–∫—É–≤–∞–Ω–æ–≥–æ ${Math.round(stats.mean * 10) / 10} –≥–æ–¥`,
        expectedValue: Math.round(stats.mean * 10) / 10,
        actualValue: trip.deliveryTime,
        deviation: Math.round(((trip.deliveryTime - stats.mean) / stats.mean) * 100),
        date: trip.date,
        route: trip.route,
        suggestions: this.generateTimeSuggestions(trip, stats.mean)
      };
    }

    return null;
  }

  /**
   * –í–∏—è–≤–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π —É –≤—ñ–¥—Å—Ç–∞–Ω—ñ
   */
  private detectDistanceAnomaly(trip: AIHistoricalData): Anomaly | null {
    const sameRouteTrips = this.historicalData.filter(
      t => t.route.from === trip.route.from && t.route.to === trip.route.to
    );

    if (sameRouteTrips.length < 3) return null;

    const stats = this.calculateStatistics(sameRouteTrips.map(t => t.distance));
    const zScore = Math.abs((trip.distance - stats.mean) / stats.stdDev);

    if (zScore > this.thresholds.distance.moderate) {
      const severity = zScore > this.thresholds.distance.severe ? 'high' : 'medium';
      
      return {
        id: `distance-${trip.id}`,
        type: 'distance',
        severity,
        description: `–í—ñ–¥—Å—Ç–∞–Ω—å ${trip.distance} –∫–º –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó ${Math.round(stats.mean)} –∫–º –¥–ª—è —Ü—å–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É`,
        expectedValue: Math.round(stats.mean),
        actualValue: trip.distance,
        deviation: Math.round(((trip.distance - stats.mean) / stats.mean) * 100),
        date: trip.date,
        route: trip.route,
        suggestions: this.generateDistanceSuggestions(trip, stats.mean)
      };
    }

    return null;
  }

  /**
   * –í–∏—è–≤–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π —É –∑–∞–≥–∞–ª—å–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç–∞—Ö
   */
  private detectCostAnomaly(trip: AIHistoricalData): Anomaly | null {
    const costPerKm = trip.fuelCost / trip.distance;
    const similarTrips = this.findSimilarTrips(trip);
    
    if (similarTrips.length < 3) return null;

    const similarCostPerKm = similarTrips.map(t => t.fuelCost / t.distance);
    const stats = this.calculateStatistics(similarCostPerKm);
    const zScore = Math.abs((costPerKm - stats.mean) / stats.stdDev);

    if (zScore > this.thresholds.cost.moderate) {
      const severity = zScore > this.thresholds.cost.severe ? 'high' : 'medium';
      
      return {
        id: `cost-${trip.id}`,
        type: 'cost',
        severity,
        description: `–í–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞ –∫–º ${Math.round(costPerKm)} –≥—Ä–Ω/–∫–º –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó ${Math.round(stats.mean)} –≥—Ä–Ω/–∫–º`,
        expectedValue: Math.round(stats.mean),
        actualValue: Math.round(costPerKm),
        deviation: Math.round(((costPerKm - stats.mean) / stats.mean) * 100),
        date: trip.date,
        route: trip.route,
        suggestions: this.generateCostSuggestions(trip, stats.mean * trip.distance)
      };
    }

    return null;
  }

  /**
   * –ü–æ—à—É–∫ —Å—Ö–æ–∂–∏—Ö —Ä–µ–π—Å—ñ–≤ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
   */
  private findSimilarTrips(trip: AIHistoricalData): AIHistoricalData[] {
    return this.historicalData.filter(t => {
      const distanceDiff = Math.abs(t.distance - trip.distance) / trip.distance;
      const weightDiff = Math.abs(t.cargoWeight - trip.cargoWeight) / trip.cargoWeight;
      
      return distanceDiff < 0.3 && weightDiff < 0.4; // 30% –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ø–æ –≤—ñ–¥—Å—Ç–∞–Ω—ñ, 40% –ø–æ –≤–∞–∑—ñ
    });
  }

  /**
   * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤
   */
  private calculateStatistics(values: number[]) {
    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;
    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;
    const stdDev = Math.sqrt(variance);

    return { mean, variance, stdDev };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –∞–Ω–æ–º–∞–ª—ñ–π –ø–∞–ª–∏–≤–∞
   */
  private generateFuelSuggestions(trip: AIHistoricalData, expectedFuelCost: number): string[] {
    const suggestions: string[] = [];
    
    if (trip.fuelCost > expectedFuelCost) {
      suggestions.push('–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π —Å—Ç–∞–Ω –∞–≤—Ç–æ–º–æ–±—ñ–ª—è');
      suggestions.push('–û–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç');
      if (trip.cargoWeight > 20000) {
        suggestions.push('–†–æ–∑–≥–ª—è–Ω—å—Ç–µ —Ä–æ–∑–ø–æ–¥—ñ–ª –≤–∞–∂–∫–æ–≥–æ –≤–∞–Ω—Ç–∞–∂—É –Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞ —Ä–µ–π—Å—ñ–≤');
      }
    } else {
      suggestions.push('–ß—É–¥–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ —Ñ–∞–∫—Ç–æ—Ä–∏ —É—Å–ø—ñ—Ö—É');
      suggestions.push('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Ü–µ–π –¥–æ—Å–≤—ñ–¥ –¥–ª—è —ñ–Ω—à–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤');
    }

    return suggestions;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –∞–Ω–æ–º–∞–ª—ñ–π —á–∞—Å—É
   */
  private generateTimeSuggestions(trip: AIHistoricalData, expectedTime: number): string[] {
    const suggestions: string[] = [];
    
    if (trip.deliveryTime > expectedTime) {
      suggestions.push('–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–æ—Ä–æ–∂–Ω—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–∞ –∑–∞—Ç–æ—Ä–∏');
      suggestions.push('–ó–∞–ø–ª–∞–Ω—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç');
      suggestions.push('–í—Ä–∞—Ö—É–π—Ç–µ —á–∞—Å –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É –≤–æ–¥—ñ—è');
    } else {
      suggestions.push('–í—ñ–¥–º—ñ–Ω–Ω–∏–π —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏!');
      suggestions.push('–î–æ–∫—É–º–µ–Ω—Ç—É–π—Ç–µ —É—Å–ø—ñ—à–Ω—ñ –ø—Ä–∞–∫—Ç–∏–∫–∏');
    }

    return suggestions;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –∞–Ω–æ–º–∞–ª—ñ–π –≤—ñ–¥—Å—Ç–∞–Ω—ñ
   */
  private generateDistanceSuggestions(trip: AIHistoricalData, expectedDistance: number): string[] {
    const suggestions: string[] = [];
    
    if (trip.distance > expectedDistance) {
      suggestions.push('–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—É');
      suggestions.push('–ú–æ–∂–ª–∏–≤–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–≤—Å—è –æ–±\'—ó–∑–¥');
      suggestions.push('–û–Ω–æ–≤—ñ—Ç—å –±–∞–∑—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –≤—ñ–¥—Å—Ç–∞–Ω–µ–π');
    } else {
      suggestions.push('–ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –º–∞—Ä—à—Ä—É—Ç!');
      suggestions.push('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Ü–µ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö —Ä–µ–π—Å—ñ–≤');
    }

    return suggestions;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –∞–Ω–æ–º–∞–ª—ñ–π –≤–∞—Ä—Ç–æ—Å—Ç—ñ
   */
  private generateCostSuggestions(trip: AIHistoricalData, expectedCost: number): string[] {
    const suggestions: string[] = [];
    
    if (trip.fuelCost > expectedCost) {
      suggestions.push('–ê–Ω–∞–ª—ñ–∑ —Ü—ñ–Ω –Ω–∞ –ê–ó–° –ø–æ –º–∞—Ä—à—Ä—É—Ç—É');
      suggestions.push('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–ª–∏–≤–∞');
      suggestions.push('–ú–æ–∂–ª–∏–≤–µ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ü—ñ–Ω –Ω–∞ –ø–∞–ª–∏–≤–æ');
    } else {
      suggestions.push('–ï–∫–æ–Ω–æ–º–Ω–∏–π —Ä–µ–π—Å!');
      suggestions.push('–í–¥–∞–ª–∏–π –≤–∏–±—ñ—Ä –ê–ó–° –∞–±–æ –º–∞—Ä—à—Ä—É—Ç—É');
    }

    return suggestions;
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –ø–æ –∞–Ω–æ–º–∞–ª—ñ—è—Ö
   */
  getAnomalyReport(): {
    totalAnomalies: number;
    byType: { [key: string]: number };
    bySeverity: { [key: string]: number };
    recommendations: AIRecommendation[];
  } {
    const allAnomalies: Anomaly[] = [];
    
    // –ê–Ω–∞–ª—ñ–∑ –≤—Å—ñ—Ö —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    this.historicalData.forEach(trip => {
      const anomalies = this.detectAnomalies(trip);
      allAnomalies.push(...anomalies);
    });

    const byType: { [key: string]: number } = {};
    const bySeverity: { [key: string]: number } = {};

    allAnomalies.forEach(anomaly => {
      byType[anomaly.type] = (byType[anomaly.type] || 0) + 1;
      bySeverity[anomaly.severity] = (bySeverity[anomaly.severity] || 0) + 1;
    });

    const recommendations: AIRecommendation[] = [];

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–æ–º–∞–ª—ñ–π
    if (byType.fuel > 5) {
      recommendations.push({
        type: 'fuel',
        priority: 'high',
        title: '–ß–∞—Å—Ç—ñ –∞–Ω–æ–º–∞–ª—ñ—ó –≤–∏—Ç—Ä–∞—Ç –ø–∞–ª–∏–≤–∞',
        description: '–í–∏—è–≤–ª–µ–Ω–æ –±–∞–≥–∞—Ç–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω—å —É –≤–∏—Ç—Ä–∞—Ç–∞—Ö –ø–∞–ª–∏–≤–∞. –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –æ–≥–ª—è–¥ –∞–≤—Ç–æ–ø–∞—Ä–∫—É.',
        expectedSaving: byType.fuel * 300,
        currency: 'UAH'
      });
    }

    if (byType.time > 3) {
      recommendations.push({
        type: 'timing',
        priority: 'medium',
        title: '–ü—Ä–æ–±–ª–µ–º–∏ –∑ —á–∞—Å–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏',
        description: '–ß–∞—Å—Ç—ñ –∑–∞—Ç—Ä–∏–º–∫–∏ –≤ –¥–æ—Å—Ç–∞–≤—Ü—ñ. –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤.',
        expectedSaving: byType.time * 200,
        currency: 'UAH'
      });
    }

    return {
      totalAnomalies: allAnomalies.length,
      byType,
      bySeverity,
      recommendations
    };
  }
} 