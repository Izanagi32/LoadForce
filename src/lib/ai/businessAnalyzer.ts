/**
 * üß† –†–æ–∑—É–º–Ω–∏–π –±—ñ–∑–Ω–µ—Å-–∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä EuroTandemFORCE
 * –ù–∞–¥–∞—î –¥—ñ—î–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∞–ª—å–Ω–æ—ó –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏
 */

import type { CargoItem, CalculationResult } from '@/types/calculation';

export interface BusinessMetrics {
  profitabilityScore: number; // 0-100
  efficiencyScore: number;    // 0-100
  riskScore: number;          // 0-100
  competitivenessScore: number; // 0-100
}

export interface MarketConditions {
  fuelPriceTrend: 'rising' | 'falling' | 'stable';
  demandLevel: 'high' | 'medium' | 'low';
  seasonality: 'peak' | 'normal' | 'low';
  competition: 'high' | 'medium' | 'low';
}

export interface SmartRecommendation {
  id: string;
  category: 'pricing' | 'route' | 'fuel' | 'timing' | 'risk' | 'strategy';
  priority: 'critical' | 'high' | 'medium' | 'low';
  title: string;
  description: string;
  impact: string;
  actionable: string;
  potentialSavings: number;
  implementationTime: string;
  confidence: number; // 0-100%
  reasoning: string[];
}

export interface BusinessInsight {
  type: 'opportunity' | 'threat' | 'optimization' | 'warning';
  message: string;
  data: any;
  actionRequired: boolean;
}

class BusinessAnalyzer {
  
  /**
   * üéØ –ê–Ω–∞–ª—ñ–∑—É—î –ø–æ—Ç–æ—á–Ω—É —Å–∏—Ç—É–∞—Ü—ñ—é —Ç–∞ –≥–µ–Ω–µ—Ä—É—î —Ä–æ–∑—É–º–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
   */
  analyzeBusinessSituation(
    cargoItems: CargoItem[], 
    calculation: CalculationResult,
    historicalData?: any[]
  ) {
    
    // üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±—ñ–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫
    const metrics = this.calculateBusinessMetrics(cargoItems, calculation);
    
    // üåç –ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫–æ–≤–∏—Ö —É–º–æ–≤
    const marketConditions = this.analyzeMarketConditions(cargoItems, calculation);
    
    // üéØ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–æ–∑—É–º–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
    const recommendations = this.generateSmartRecommendations(
      cargoItems, 
      calculation, 
      metrics, 
      marketConditions
    );
    
    // üí° –ë—ñ–∑–Ω–µ—Å-—ñ–Ω—Å–∞–π—Ç–∏
    const insights = this.generateBusinessInsights(cargoItems, calculation, metrics);
    
    return {
      metrics,
      recommendations,
      insights,
      marketConditions
    };
  }

  /**
   * üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö –±—ñ–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫
   */
  private calculateBusinessMetrics(
    cargoItems: CargoItem[], 
    calculation: CalculationResult
  ): BusinessMetrics {
    
    // –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å (0-100)
    let profitabilityScore = 0;
    if (calculation.profitMargin > 25) profitabilityScore = 100;
    else if (calculation.profitMargin > 20) profitabilityScore = 85;
    else if (calculation.profitMargin > 15) profitabilityScore = 70;
    else if (calculation.profitMargin > 10) profitabilityScore = 50;
    else if (calculation.profitMargin > 5) profitabilityScore = 30;
    else if (calculation.profitMargin > 0) profitabilityScore = 15;
    else profitabilityScore = 0;

    // –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
    const avgDistancePerCargo = calculation.totalDistance / cargoItems.length;
    const totalWeight = calculation.totalWeight;
    const loadFactor = totalWeight / 25; // –ú–∞–∫—Å 25 —Ç–æ–Ω–Ω
    
    let efficiencyScore = 0;
    if (loadFactor > 0.9 && avgDistancePerCargo < 600) efficiencyScore = 100;
    else if (loadFactor > 0.8 && avgDistancePerCargo < 800) efficiencyScore = 85;
    else if (loadFactor > 0.7 && avgDistancePerCargo < 1000) efficiencyScore = 70;
    else if (loadFactor > 0.5) efficiencyScore = 50;
    else efficiencyScore = 30;

    // –û—Ü—ñ–Ω–∫–∞ —Ä–∏–∑–∏–∫—ñ–≤
    let riskScore = 0;
    
    if (calculation.profitMargin < 5) riskScore += 40;
    else if (calculation.profitMargin < 10) riskScore += 25;
    else if (calculation.profitMargin < 15) riskScore += 10;
    
    const repositioningRatio = calculation.distanceBreakdown.repositioningDistance / calculation.totalDistance;
    if (repositioningRatio > 0.3) riskScore += 30;
    else if (repositioningRatio > 0.2) riskScore += 15;
    
    if (loadFactor < 0.5) riskScore += 20;
    else if (loadFactor < 0.7) riskScore += 10;
    
    const fuelPercentage = (calculation.costs.fuel / calculation.costs.total) * 100;
    if (fuelPercentage > 60) riskScore += 10;
    
    riskScore = Math.min(riskScore, 100);

    // –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø—Ä–æ–º–æ–∂–Ω—ñ—Å—Ç—å
    const pricePerKm = calculation.totalFreight / calculation.totalDistance;
    let competitivenessScore = 70;
    
    if (pricePerKm > 35) competitivenessScore = 40;
    else if (pricePerKm > 30) competitivenessScore = 60;
    else if (pricePerKm > 25) competitivenessScore = 80;
    else competitivenessScore = 90;

    return {
      profitabilityScore,
      efficiencyScore,
      riskScore,
      competitivenessScore
    };
  }

  /**
   * üåç –ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫–æ–≤–∏—Ö —É–º–æ–≤
   */
  private analyzeMarketConditions(cargoItems: CargoItem[], calculation: CalculationResult): MarketConditions {
    const currentMonth = new Date().getMonth();
    
    return {
      fuelPriceTrend: currentMonth < 3 || currentMonth > 10 ? 'rising' : 'stable',
      demandLevel: currentMonth >= 3 && currentMonth <= 9 ? 'high' : 'medium',
      seasonality: currentMonth >= 4 && currentMonth <= 8 ? 'peak' : 'normal',
      competition: 'medium'
    };
  }

  /**
   * üéØ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–æ–∑—É–º–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
   */
  private generateSmartRecommendations(
    cargoItems: CargoItem[],
    calculation: CalculationResult,
    metrics: BusinessMetrics,
    market: MarketConditions
  ): SmartRecommendation[] {
    
    const recommendations: SmartRecommendation[] = [];

    // üí∞ –¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è
    if (calculation.profitMargin < 15) {
      recommendations.push({
        id: 'pricing-optimization',
        category: 'pricing',
        priority: 'high',
        title: 'üí∞ –ü—ñ–¥–≤–∏—â–∏—Ç–∏ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å',
        description: `–ú–∞—Ä–∂–∞ ${calculation.profitMargin.toFixed(1)}% –Ω–∏–∂—á–µ –º—ñ–Ω—ñ–º—É–º—É 15%`,
        impact: `+${(calculation.totalFreight * 0.05).toFixed(0)} ‚Ç¥ –¥–æ –ø—Ä–∏–±—É—Ç–∫—É`,
        actionable: '–ó–±—ñ–ª—å—à–∏—Ç–∏ —Ñ—Ä–∞—Ö—Ç –Ω–∞ 5-8% –∞–±–æ –∑–Ω–∞–π—Ç–∏ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –≤–∞–Ω—Ç–∞–∂',
        potentialSavings: calculation.totalFreight * 0.05,
        implementationTime: '–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä–µ–π—Å',
        confidence: 85,
        reasoning: [
          '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –±–µ–∑–ø–µ—á–Ω–∞ –º–∞—Ä–∂–∞ - 15%',
          '–†–∏–Ω–∫–æ–≤—ñ —É–º–æ–≤–∏ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è',
          '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å –∑ –≤–∏—â–∏–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏'
        ]
      });
    }

    // ‚õΩ –ü–∞–ª–∏–≤–æ
    const fuelPercentage = (calculation.costs.fuel / calculation.costs.total) * 100;
    if (fuelPercentage > 50) {
      recommendations.push({
        id: 'fuel-optimization',
        category: 'fuel',
        priority: 'high',
        title: '‚õΩ –ó–º–µ–Ω—à–∏—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –ø–∞–ª–∏–≤–æ',
        description: `${fuelPercentage.toFixed(1)}% –≤–∏—Ç—Ä–∞—Ç - —Ü–µ –ø–∞–ª–∏–≤–æ (–Ω–æ—Ä–º–∞ 45%)`,
        impact: `-${(calculation.costs.fuel * 0.1).toFixed(0)} ‚Ç¥ –µ–∫–æ–Ω–æ–º—ñ—ó`,
        actionable: '–ï–∫–æ-–≤–æ–¥—ñ–Ω–Ω—è, –¥–µ—à–µ–≤—ñ –ê–ó–°, —Ç–µ—Ö–æ–≥–ª—è–¥ –¥–≤–∏–≥—É–Ω–∞',
        potentialSavings: calculation.costs.fuel * 0.1,
        implementationTime: '–ù–µ–≥–∞–π–Ω–æ',
        confidence: 90,
        reasoning: [
          '–ï–∫–æ-–≤–æ–¥—ñ–Ω–Ω—è –¥–∞—î 10-15% –µ–∫–æ–Ω–æ–º—ñ—ó',
          '–í–∏–±—ñ—Ä –ê–ó–° –µ–∫–æ–Ω–æ–º–∏—Ç—å 3-7 –≥—Ä–Ω/–ª',
          '–¢–µ—Ö—Å—Ç–∞–Ω –≤–ø–ª–∏–≤–∞—î –Ω–∞ –≤–∏—Ç—Ä–∞—Ç—É –¥–æ 20%'
        ]
      });
    }

    // üöö –ú–∞—Ä—à—Ä—É—Ç
    const repositioningRatio = calculation.distanceBreakdown.repositioningDistance / calculation.totalDistance;
    if (repositioningRatio > 0.25) {
      recommendations.push({
        id: 'route-optimization',
        category: 'route',
        priority: 'medium',
        title: 'üó∫Ô∏è –ó–º–µ–Ω—à–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ –ø–µ—Ä–µ—ó–∑–¥–∏',
        description: `${(repositioningRatio * 100).toFixed(1)}% –≤—ñ–¥—Å—Ç–∞–Ω—ñ –±–µ–∑ –≤–∞–Ω—Ç–∞–∂—É`,
        impact: `-${(calculation.costs.fuel * repositioningRatio * 0.5).toFixed(0)} ‚Ç¥ –µ–∫–æ–Ω–æ–º—ñ—ó`,
        actionable: '–®—É–∫–∞—Ç–∏ –∑–≤–æ—Ä–æ—Ç–Ω—ñ –≤–∞–Ω—Ç–∞–∂—ñ —á–µ—Ä–µ–∑ –±—ñ—Ä–∂—ñ',
        potentialSavings: calculation.costs.fuel * repositioningRatio * 0.5,
        implementationTime: '1-2 —Ç–∏–∂–Ω—ñ',
        confidence: 75,
        reasoning: [
          '–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –≤–∞–Ω—Ç–∞–∂ –ø–æ–∫—Ä–∏–≤–∞—î 70-100% –≤–∏—Ç—Ä–∞—Ç',
          '–ë—ñ—Ä–∂—ñ –¥–∞—é—Ç—å +25% –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤',
          '–ö—ñ–ª—å—Ü–µ–≤—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à—ñ'
        ]
      });
    }

    return recommendations.sort((a, b) => {
      const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
      return priorityOrder[b.priority] - priorityOrder[a.priority];
    });
  }

  /**
   * üí° –ë—ñ–∑–Ω–µ—Å-—ñ–Ω—Å–∞–π—Ç–∏
   */
  private generateBusinessInsights(
    cargoItems: CargoItem[],
    calculation: CalculationResult,
    metrics: BusinessMetrics
  ): BusinessInsight[] {
    
    const insights: BusinessInsight[] = [];

    if (calculation.profitMargin > 25) {
      insights.push({
        type: 'opportunity',
        message: `üéØ –í—ñ–¥–º—ñ–Ω–Ω–∞ –º–∞—Ä–∂–∞ ${calculation.profitMargin.toFixed(1)}%! –ß–∞—Å –º–∞—Å—à—Ç–∞–±—É–≤–∞—Ç–∏`,
        data: { margin: calculation.profitMargin },
        actionRequired: false
      });
    } else if (calculation.profitMargin < 5) {
      insights.push({
        type: 'threat',
        message: `‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –º–∞—Ä–∂–∞ ${calculation.profitMargin.toFixed(1)}%! –†–∏–∑–∏–∫ –∑–±–∏—Ç–∫—ñ–≤`,
        data: { margin: calculation.profitMargin },
        actionRequired: true
      });
    }

    const loadUtilization = (calculation.totalWeight / 25) * 100;
    if (loadUtilization < 50) {
      insights.push({
        type: 'optimization',
        message: `üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–∏—à–µ ${loadUtilization.toFixed(1)}% - —à—É–∫–∞–π—Ç–µ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –≤–∞–Ω—Ç–∞–∂—ñ`,
        data: { utilization: loadUtilization },
        actionRequired: true
      });
    }

    return insights;
  }
}

export const businessAnalyzer = new BusinessAnalyzer();