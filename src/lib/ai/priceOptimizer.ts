// üí∞ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –º–∞—Ä–∂—ñ
import type { AIHistoricalData, AIRecommendation } from './index';

export interface PriceRecommendation {
  recommendedPrice: number;
  minPrice: number;
  maxPrice: number;
  margin: number;
  confidence: number;
  factors: string[];
}

export class PriceOptimizer {
  private historicalData: AIHistoricalData[] = [];
  private targetMargin = 0.25; // 25% —Ü—ñ–ª—å–æ–≤–∞ –º–∞—Ä–∂–∞

  constructor(data?: AIHistoricalData[], targetMargin = 0.25) {
    if (data) {
      this.historicalData = data;
    }
    this.targetMargin = targetMargin;
  }

  /**
   * –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è —Ü—ñ–Ω–∏ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
   */
  recommendPrice(
    totalCosts: number,
    distance: number,
    cargoType: string,
    urgency: 'standard' | 'urgent' | 'express',
    clientType: 'new' | 'regular' | 'vip'
  ): PriceRecommendation {

    let basePrice = totalCosts * (1 + this.targetMargin);

    // –ö–æ—Ä–µ–∫—Ü—ñ—è –Ω–∞ —Ç–∏–ø –≤–∞–Ω—Ç–∞–∂—É
    basePrice *= this.getCargoTypeFactor(cargoType);

    // –ö–æ—Ä–µ–∫—Ü—ñ—è –Ω–∞ —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—å
    basePrice *= this.getUrgencyFactor(urgency);

    // –ö–æ—Ä–µ–∫—Ü—ñ—è –Ω–∞ —Ç–∏–ø –∫–ª—ñ—î–Ω—Ç–∞
    basePrice *= this.getClientTypeFactor(clientType);

    // –Ü—Å—Ç–æ—Ä–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É
    const marketAnalysis = this.analyzeMarketPrices(distance, cargoType);
    
    const recommendedPrice = this.adjustForMarket(basePrice, marketAnalysis);
    const minPrice = totalCosts * 1.1; // –º—ñ–Ω—ñ–º—É–º 10% –º–∞—Ä–∂—ñ
    const maxPrice = recommendedPrice * 1.3; // –º–∞–∫—Å–∏–º—É–º +30%

    return {
      recommendedPrice: Math.round(recommendedPrice),
      minPrice: Math.round(minPrice),
      maxPrice: Math.round(maxPrice),
      margin: (recommendedPrice - totalCosts) / totalCosts,
      confidence: marketAnalysis.confidence,
      factors: ['costs', 'cargo_type', urgency, clientType, 'market_analysis']
    };
  }

  /**
   * –§–∞–∫—Ç–æ—Ä —Ü—ñ–Ω–∏ –∑–∞ —Ç–∏–ø–æ–º –≤–∞–Ω—Ç–∞–∂—É
   */
  private getCargoTypeFactor(cargoType: string): number {
    const factors: { [key: string]: number } = {
      'general': 1.0,
      'fragile': 1.15, // –∫—Ä–∏—Ö–∫–∏–π –≤–∞–Ω—Ç–∞–∂
      'dangerous': 1.25, // –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–π –≤–∞–Ω—Ç–∞–∂
      'oversized': 1.2, // –Ω–µ–≥–∞–±–∞—Ä–∏—Ç–Ω–∏–π
      'refrigerated': 1.3, // —Ä–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä
      'express': 1.4 // –µ–∫—Å–ø—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∞
    };
    return factors[cargoType] || 1.0;
  }

  /**
   * –§–∞–∫—Ç–æ—Ä —Ü—ñ–Ω–∏ –∑–∞ —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—é
   */
  private getUrgencyFactor(urgency: string): number {
    const factors = {
      'standard': 1.0,
      'urgent': 1.2,
      'express': 1.5
    };
    return factors[urgency as keyof typeof factors] || 1.0;
  }

  /**
   * –§–∞–∫—Ç–æ—Ä —Ü—ñ–Ω–∏ –∑–∞ —Ç–∏–ø–æ–º –∫–ª—ñ—î–Ω—Ç–∞
   */
  private getClientTypeFactor(clientType: string): number {
    const factors = {
      'new': 1.1, // –Ω–æ–≤—ñ –∫–ª—ñ—î–Ω—Ç–∏ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Ü—ñ–Ω–∞
      'regular': 0.95, // –ø–æ—Å—Ç—ñ–π–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏ - –∑–Ω–∏–∂–∫–∞
      'vip': 0.9 // VIP –∫–ª—ñ—î–Ω—Ç–∏ - –±—ñ–ª—å—à–∞ –∑–Ω–∏–∂–∫–∞
    };
    return factors[clientType as keyof typeof factors] || 1.0;
  }

  /**
   * –ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫–æ–≤–∏—Ö —Ü—ñ–Ω
   */
  private analyzeMarketPrices(distance: number, cargoType: string) {
    const similarTrips = this.historicalData.filter(trip => {
      const distDiff = Math.abs(trip.distance - distance) / distance;
      return distDiff < 0.4; // 40% –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ø–æ –≤—ñ–¥—Å—Ç–∞–Ω—ñ
    });

    if (similarTrips.length < 3) {
      return { averagePrice: null, confidence: 0.5 };
    }

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Ü—ñ–Ω–∏ –∑–∞ –∫–º
    const pricesPerKm = similarTrips.map(trip => {
      // –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ä–µ–π—Å—É = fuel cost * 2 (–ø—Ä–∏–±–ª–∏–∑–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞)
      const estimatedPrice = trip.fuelCost * 2;
      return estimatedPrice / trip.distance;
    });

    const averagePricePerKm = pricesPerKm.reduce((sum, price) => sum + price, 0) / pricesPerKm.length;
    const confidence = Math.min(similarTrips.length / 10, 0.9);

    return {
      averagePrice: averagePricePerKm * distance,
      confidence
    };
  }

  /**
   * –ö–æ—Ä–µ–∫—Ü—ñ—è —Ü—ñ–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–∏–Ω–∫–æ–≤–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
   */
  private adjustForMarket(basePrice: number, marketAnalysis: any): number {
    if (!marketAnalysis.averagePrice) {
      return basePrice;
    }

    // –ó–≤–∞–∂–µ–Ω–µ —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —Ç–∞ —Ä–∏–Ω–∫–æ–≤–æ—ó —Ü—ñ–Ω–∏
    const marketWeight = marketAnalysis.confidence;
    const baseWeight = 1 - marketWeight;

    return basePrice * baseWeight + marketAnalysis.averagePrice * marketWeight;
  }

  /**
   * –ê–Ω–∞–ª—ñ–∑ –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ –ø–æ –∫–ª—ñ—î–Ω—Ç–∞—Ö
   */
  analyzeClientProfitability(): AIRecommendation[] {
    const recommendations: AIRecommendation[] = [];

    // –ê–Ω–∞–ª—ñ–∑ –º–∞—Ä–∂—ñ –ø–æ —Ä–µ–π—Å–∞—Ö
    const lowMarginTrips = this.historicalData.filter(trip => {
      const estimatedCost = trip.fuelCost * 1.8; // –ø—Ä–∏–±–ª–∏–∑–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ –≤–∏—Ç—Ä–∞—Ç
      const estimatedPrice = trip.fuelCost * 2;
      const margin = (estimatedPrice - estimatedCost) / estimatedCost;
      return margin < 0.15; // –º–µ–Ω—à–µ 15% –º–∞—Ä–∂—ñ
    });

    if (lowMarginTrips.length > 5) {
      recommendations.push({
        type: 'pricing',
        priority: 'high',
        title: '–ù–∏–∑—å–∫–∞ –º–∞—Ä–∂–∞ —Ä–µ–π—Å—ñ–≤',
        description: `–í–∏—è–≤–ª–µ–Ω–æ ${lowMarginTrips.length} —Ä–µ–π—Å—ñ–≤ –∑ –Ω–∏–∑—å–∫–æ—é –º–∞—Ä–∂–µ—é. –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è.`,
        expectedSaving: lowMarginTrips.length * 500,
        currency: 'UAH'
      });
    }

    // –ê–Ω–∞–ª—ñ–∑ —á–∞—Å—Ç–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤
    const routeFrequency: { [key: string]: number } = {};
    this.historicalData.forEach(trip => {
      const route = `${trip.route.from}-${trip.route.to}`;
      routeFrequency[route] = (routeFrequency[route] || 0) + 1;
    });

    const frequentRoutes = Object.entries(routeFrequency)
      .filter(([_, count]) => count >= 5)
      .map(([route, count]) => ({ route, count }));

    if (frequentRoutes.length > 0) {
      recommendations.push({
        type: 'pricing',
        priority: 'medium',
        title: '–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Ü—ñ–Ω —á–∞—Å—Ç–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤',
        description: '–î–ª—è —á–∞—Å—Ç–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –º–æ–∂–Ω–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–∞–∫–µ—Ç–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏ –∫–ª—ñ—î–Ω—Ç–∞–º.',
        expectedSaving: frequentRoutes.length * 1000,
        currency: 'UAH'
      });
    }

    return recommendations;
  }

  /**
   * –î–∏–Ω–∞–º—ñ—á–Ω–µ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–ø–∏—Ç—É
   */
  dynamicPricing(
    basePrice: number,
    currentDemand: 'low' | 'medium' | 'high',
    seasonality: 'low' | 'medium' | 'high',
    competitionLevel: 'low' | 'medium' | 'high'
  ): number {
    let adjustedPrice = basePrice;

    // –ö–æ—Ä–µ–∫—Ü—ñ—è –Ω–∞ –ø–æ–ø–∏—Ç
    const demandFactors = { low: 0.9, medium: 1.0, high: 1.15 };
    adjustedPrice *= demandFactors[currentDemand];

    // –ö–æ—Ä–µ–∫—Ü—ñ—è –Ω–∞ —Å–µ–∑–æ–Ω–Ω—ñ—Å—Ç—å
    const seasonalityFactors = { low: 0.95, medium: 1.0, high: 1.1 };
    adjustedPrice *= seasonalityFactors[seasonality];

    // –ö–æ—Ä–µ–∫—Ü—ñ—è –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—é
    const competitionFactors = { low: 1.05, medium: 1.0, high: 0.95 };
    adjustedPrice *= competitionFactors[competitionLevel];

    return Math.round(adjustedPrice);
  }

  /**
   * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–æ—á–∫–∏ –±–µ–∑–∑–±–∏—Ç–∫–æ–≤–æ—Å—Ç—ñ
   */
  calculateBreakEven(
    fixedCosts: number,
    variableCostPerKm: number,
    averagePricePerKm: number
  ): {
    breakEvenDistance: number;
    breakEvenPrice: number;
    recommendation: string;
  } {
    const contribution = averagePricePerKm - variableCostPerKm;
    const breakEvenDistance = fixedCosts / contribution;
    const breakEvenPrice = fixedCosts + (breakEvenDistance * variableCostPerKm);

    let recommendation = '';
    if (breakEvenDistance > 2000) {
      recommendation = '–í–∏—Å–æ–∫–∞ —Ç–æ—á–∫–∞ –±–µ–∑–∑–±–∏—Ç–∫–æ–≤–æ—Å—Ç—ñ. –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –∑–Ω–∏–∂–µ–Ω–Ω—è —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç.';
    } else if (breakEvenDistance < 500) {
      recommendation = '–ù–∏–∑—å–∫–∞ —Ç–æ—á–∫–∞ –±–µ–∑–∑–±–∏—Ç–∫–æ–≤–æ—Å—Ç—ñ. –ì–∞—Ä–Ω—ñ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∏ –¥–ª—è –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ.';
    } else {
      recommendation = '–ü–æ–º—ñ—Ä–Ω–∞ —Ç–æ—á–∫–∞ –±–µ–∑–∑–±–∏—Ç–∫–æ–≤–æ—Å—Ç—ñ. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –¥–ª—è –≥–∞–ª—É–∑—ñ.';
    }

    return {
      breakEvenDistance: Math.round(breakEvenDistance),
      breakEvenPrice: Math.round(breakEvenPrice),
      recommendation
    };
  }
} 