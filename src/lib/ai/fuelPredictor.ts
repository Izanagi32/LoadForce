// üîÆ –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –ø–∞–ª–∏–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
import type { AIHistoricalData, AIPrediction } from './index';

export class FuelCostPredictor {
  private historicalData: AIHistoricalData[] = [];

  constructor(data?: AIHistoricalData[]) {
    if (data) {
      this.historicalData = data;
    }
  }

  /**
   * –î–æ–¥–∞—Ç–∏ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è
   */
  addHistoricalData(data: AIHistoricalData[]) {
    this.historicalData.push(...data);
  }

  /**
   * –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –ø–∞–ª–∏–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ª—ñ–Ω—ñ–π–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó
   */
  predictFuelCost(distance: number, cargoWeight: number, currentFuelPrice: number): AIPrediction {
    if (this.historicalData.length === 0) {
      // –ë–∞–∑–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–µ–∑ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
      const baseFuelConsumption = 25; // –ª/100–∫–º
      const weightFactor = 1 + (cargoWeight / 25000) * 0.3; // +30% –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      const predictedConsumption = (distance / 100) * baseFuelConsumption * weightFactor;
      const predictedCost = predictedConsumption * currentFuelPrice;

      return {
        predicted: Math.round(predictedCost),
        confidence: 0.7,
        factors: ['distance', 'cargo_weight', 'fuel_price'],
        recommendation: '–î–æ–¥–∞–π—Ç–µ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ç–æ—á–Ω–æ—Å—Ç—ñ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è'
      };
    }

    // –õ—ñ–Ω—ñ–π–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    const regression = this.performLinearRegression();
    const predicted = regression.slope * distance + regression.intercept;
    
    // –ö–æ—Ä–µ–∫—Ü—ñ—è –Ω–∞ –≤–∞–≥—É –≤–∞–Ω—Ç–∞–∂—É
    const weightCorrection = this.calculateWeightCorrection(cargoWeight);
    const adjustedPrediction = predicted * weightCorrection;

    // –ö–æ—Ä–µ–∫—Ü—ñ—è –Ω–∞ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –ø–∞–ª–∏–≤–∞
    const averageHistoricalFuelPrice = this.getAverageFuelPrice();
    const priceCorrection = currentFuelPrice / averageHistoricalFuelPrice;
    const finalPrediction = adjustedPrediction * priceCorrection;

    const confidence = this.calculateConfidence(regression.correlation);

    return {
      predicted: Math.round(finalPrediction),
      confidence,
      factors: ['historical_data', 'distance', 'cargo_weight', 'fuel_price_trend'],
      recommendation: this.generateRecommendation(finalPrediction, distance, cargoWeight)
    };
  }

  /**
   * –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ª—ñ–Ω—ñ–π–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó
   */
  private performLinearRegression() {
    const n = this.historicalData.length;
    
    let sumX = 0, sumY = 0, sumXY = 0, sumXX = 0;
    
    for (const data of this.historicalData) {
      const x = data.distance;
      const y = data.fuelCost;
      
      sumX += x;
      sumY += y;
      sumXY += x * y;
      sumXX += x * x;
    }
    
    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
    const intercept = (sumY - slope * sumX) / n;
    
    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó
    const meanX = sumX / n;
    const meanY = sumY / n;
    
    let numerator = 0, denominatorX = 0, denominatorY = 0;
    
    for (const data of this.historicalData) {
      const diffX = data.distance - meanX;
      const diffY = data.fuelCost - meanY;
      
      numerator += diffX * diffY;
      denominatorX += diffX * diffX;
      denominatorY += diffY * diffY;
    }
    
    const correlation = numerator / Math.sqrt(denominatorX * denominatorY);
    
    return { slope, intercept, correlation };
  }

  /**
   * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ—Ä–µ–∫—Ü—ñ—ó –Ω–∞ –≤–∞–≥—É –≤–∞–Ω—Ç–∞–∂—É
   */
  private calculateWeightCorrection(cargoWeight: number): number {
    if (this.historicalData.length === 0) return 1;

    // –ê–Ω–∞–ª—ñ–∑ –≤–ø–ª–∏–≤—É –≤–∞–≥–∏ –Ω–∞ –≤–∏—Ç—Ä–∞—Ç–∏
    const weightImpact = this.historicalData.reduce((acc, data) => {
      const normalizedWeight = data.cargoWeight / 25000; // –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –≤–∞–≥–∏
      const fuelPerKm = data.fuelCost / data.distance;
      return acc + fuelPerKm * normalizedWeight;
    }, 0) / this.historicalData.length;

    const normalizedNewWeight = cargoWeight / 25000;
    return 1 + (normalizedNewWeight * weightImpact * 0.1); // –º–∞–∫—Å–∏–º—É–º 10% –∑–±—ñ–ª—å—à–µ–Ω–Ω—è
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Ü—ñ–Ω–∏ –ø–∞–ª–∏–≤–∞ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó
   */
  private getAverageFuelPrice(): number {
    if (this.historicalData.length === 0) return 50; // –±–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞

    const totalDistance = this.historicalData.reduce((acc, data) => acc + data.distance, 0);
    const totalFuelCost = this.historicalData.reduce((acc, data) => acc + data.fuelCost, 0);
    
    const averageConsumption = 25; // –ª/100–∫–º
    const totalFuelLiters = (totalDistance / 100) * averageConsumption;
    
    return totalFuelCost / totalFuelLiters;
  }

  /**
   * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–≤—ñ—Ä–∏ –¥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
   */
  private calculateConfidence(correlation: number): number {
    const dataQuality = Math.min(this.historicalData.length / 50, 1); // –±—ñ–ª—å—à–µ –¥–∞–Ω–∏—Ö = –±—ñ–ª—å—à–∞ –¥–æ–≤—ñ—Ä–∞
    const correlationQuality = Math.abs(correlation);
    
    return Math.min((dataQuality * 0.4 + correlationQuality * 0.6) * 0.95, 0.95);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
   */
  private generateRecommendation(predictedCost: number, distance: number, cargoWeight: number): string {
    const costPerKm = predictedCost / distance;
    
    if (costPerKm > 15) {
      return '–í–∏—Å–æ–∫—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –ø–∞–ª–∏–≤–æ. –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –º–∞—Ä—à—Ä—É—Ç—É –∞–±–æ –∑–º–µ–Ω—à–µ–Ω–Ω—è –≤–∞–≥–∏ –≤–∞–Ω—Ç–∞–∂—É.';
    }
    
    if (cargoWeight > 20000) {
      return '–í–∞–∂–∫–∏–π –≤–∞–Ω—Ç–∞–∂ –∑–±—ñ–ª—å—à—É—î –≤–∏—Ç—Ä–∞—Ç–∏ –ø–∞–ª–∏–≤–∞. –†–æ–∑–≥–ª—è–Ω—å—Ç–µ —Ä–æ–∑–ø–æ–¥—ñ–ª –Ω–∞ –∫—ñ–ª—å–∫–∞ —Ä–µ–π—Å—ñ–≤.';
    }
    
    if (costPerKm < 8) {
      return '–ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –∑ –Ω–∏–∑—å–∫–∏–º–∏ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏ –Ω–∞ –ø–∞–ª–∏–≤–æ.';
    }
    
    return '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –ø–∞–ª–∏–≤–æ –¥–ª—è –¥–∞–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É.';
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏–º –¥–∞–Ω–∏–º
   */
  getStatistics() {
    if (this.historicalData.length === 0) {
      return null;
    }

    const distances = this.historicalData.map(d => d.distance);
    const fuelCosts = this.historicalData.map(d => d.fuelCost);
    
    return {
      totalTrips: this.historicalData.length,
      averageDistance: distances.reduce((a, b) => a + b, 0) / distances.length,
      averageFuelCost: fuelCosts.reduce((a, b) => a + b, 0) / fuelCosts.length,
      minDistance: Math.min(...distances),
      maxDistance: Math.max(...distances),
      minFuelCost: Math.min(...fuelCosts),
      maxFuelCost: Math.max(...fuelCosts)
    };
  }
} 