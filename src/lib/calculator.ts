import type { CargoItem, RouteCalculationParams, CalculationResult } from '@/types/calculation';
import { getCachedRoute } from './routing';

export class RouteCalculator {
  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç—É—î —Å—É–º—É –∑ –æ–¥–Ω—ñ—î—ó –≤–∞–ª—é—Ç–∏ –≤ —ñ–Ω—à—É
   */
  private convertCurrency(
    amount: number, 
    fromCurrency: 'UAH' | 'EUR' | 'USD', 
    toCurrency: 'UAH' | 'EUR' | 'USD',
    exchangeRates: RouteCalculationParams['exchangeRates']
  ): number {
    if (fromCurrency === toCurrency) return amount;
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤—Å–µ —á–µ—Ä–µ–∑ UAH —è–∫ –±–∞–∑–æ–≤—É –≤–∞–ª—é—Ç—É
    let amountInUAH = amount;
    
    if (fromCurrency === 'EUR') {
      amountInUAH = amount * exchangeRates.EUR_UAH;
    } else if (fromCurrency === 'USD') {
      amountInUAH = amount * exchangeRates.USD_UAH;
    }
    
    if (toCurrency === 'EUR') {
      return amountInUAH / exchangeRates.EUR_UAH;
    } else if (toCurrency === 'USD') {
      return amountInUAH / exchangeRates.USD_UAH;
    }
    
    return amountInUAH;
  }

  /**
   * –†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ç–æ—á–Ω—É –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –º—ñ—Å—Ç–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –≥–µ–æ–∫–æ–¥—ñ–Ω–≥ API
   */
  private async calculateAccurateDistance(fromCity: string, toCity: string): Promise<number> {
    try {
      console.log(`üîç Calculating accurate distance: ${fromCity} ‚Üí ${toCity}`);
      const routeData = await getCachedRoute(fromCity, toCity);
      const distanceKm = Math.round(routeData.distance / 1000);
      console.log(`‚úÖ Accurate distance found: ${distanceKm} km`);
      return distanceKm;
    } catch (error) {
      console.warn(`‚ùå Error calculating distance ${fromCity} ‚Üí ${toCity}:`, error);
      // Fallback –¥–æ –ø—Ä–∏–±–ª–∏–∑–Ω–æ—ó –≤—ñ–¥—Å—Ç–∞–Ω—ñ
      return 500; // –ë—ñ–ª—å—à —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å
    }
  }

  /**
   * –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –∑–∞–≥–∞–ª—å–Ω—É –≤—ñ–¥—Å—Ç–∞–Ω—å –º–∞—Ä—à—Ä—É—Ç—É –≤–∫–ª—é—á–∞—é—á–∏ –ø–µ—Ä–µ—ó–∑–¥–∏ –º—ñ–∂ —Ç–æ—á–∫–∞–º–∏ —Ä–æ–∑–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
   */
  private async calculateTotalDistance(cargo: CargoItem[]): Promise<{ 
    totalDistance: number; 
    deliveryDistance: number; 
    repositioningDistance: number; 
  }> {
    if (cargo.length === 0) return { totalDistance: 0, deliveryDistance: 0, repositioningDistance: 0 };
    
    let deliveryDistance = 0;
    let repositioningDistance = 0;
    
    // –†–∞—Ö—É—î–º–æ —Ç–æ—á–Ω—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–µ –ø–æ–∫–ª–∞–¥–∞—î–º–æ—Å—è –Ω–∞ item.distance)
    console.log('üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏:');
    for (let i = 0; i < cargo.length; i++) {
      const item = cargo[i];
      const distance = await this.calculateAccurateDistance(item.loadingPoint, item.unloadingPoint);
      deliveryDistance += distance;
      console.log(`  üì¶ –í–∞–Ω—Ç–∞–∂ ${i + 1}: ${item.loadingPoint} ‚Üí ${item.unloadingPoint} = ${distance} –∫–º`);
    }
    
    // –†–∞—Ö—É—î–º–æ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –ø–µ—Ä–µ—ó–∑–¥—ñ–≤ –º—ñ–∂ —Ç–æ—á–∫–∞–º–∏ —Ä–æ–∑–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    console.log('üöö –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω–µ–π –ø–µ—Ä–µ—ó–∑–¥—ñ–≤:');
    for (let i = 0; i < cargo.length - 1; i++) {
      const currentUnloadingPoint = cargo[i].unloadingPoint;
      const nextLoadingPoint = cargo[i + 1].loadingPoint;
      
      // –Ø–∫—â–æ —Ç–æ—á–∫–∏ —Ä—ñ–∑–Ω—ñ, –¥–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—Ç–∞–Ω—å –ø–µ—Ä–µ—ó–∑–¥—É
      if (currentUnloadingPoint.toLowerCase() !== nextLoadingPoint.toLowerCase()) {
        const distance = await this.calculateAccurateDistance(currentUnloadingPoint, nextLoadingPoint);
        repositioningDistance += distance;
        console.log(`  üîÑ –ü–µ—Ä–µ—ó–∑–¥ ${i + 1}‚Üí${i + 2}: ${currentUnloadingPoint} ‚Üí ${nextLoadingPoint} = ${distance} –∫–º`);
      } else {
        console.log(`  ‚è≠Ô∏è –ü–µ—Ä–µ—ó–∑–¥ ${i + 1}‚Üí${i + 2}: –¢–µ —Å–∞–º–µ –º—ñ—Å—Ü–µ (${currentUnloadingPoint}) = 0 –∫–º`);
      }
    }
    
    const totalDistance = deliveryDistance + repositioningDistance;
    
    console.log(`üìã –ü—ñ–¥—Å—É–º–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω–µ–π:`);
    console.log(`  üì¶ –î–æ—Å—Ç–∞–≤–∫–∞: ${deliveryDistance} –∫–º`);
    console.log(`  üöö –ü–µ—Ä–µ—ó–∑–¥–∏: ${repositioningDistance} –∫–º`);
    console.log(`  üéØ –ó–∞–≥–∞–ª–æ–º: ${totalDistance} –∫–º`);
    
    return { totalDistance, deliveryDistance, repositioningDistance };
  }

  /**
   * –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ –∑ –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—î—é
   */
  private calculateFuelCosts(
    distanceData: { totalDistance: number; deliveryDistance: number; repositioningDistance: number },
    params: RouteCalculationParams
  ): { total: number; delivery: number; repositioning: number } {
    const deliveryFuel = (distanceData.deliveryDistance / 100) * params.fuelConsumption;
    const repositioningFuel = (distanceData.repositioningDistance / 100) * params.fuelConsumption;
    const totalFuel = deliveryFuel + repositioningFuel;
    
    const deliveryCost = deliveryFuel * params.fuelPrice;
    const repositioningCost = repositioningFuel * params.fuelPrice;
    const totalCostInOriginalCurrency = deliveryCost + repositioningCost;
    
    const totalCost = this.convertCurrency(
      totalCostInOriginalCurrency,
      params.fuelCurrency,
      params.baseCurrency,
      params.exchangeRates
    );
    
    const deliveryCostConverted = this.convertCurrency(
      deliveryCost,
      params.fuelCurrency,
      params.baseCurrency,
      params.exchangeRates
    );
    
    const repositioningCostConverted = this.convertCurrency(
      repositioningCost,
      params.fuelCurrency,
      params.baseCurrency,
      params.exchangeRates
    );
    
    console.log(`‚õΩ –í–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –ø–∞–ª–∏–≤–æ:`);
    console.log(`  üì¶ –î–æ—Å—Ç–∞–≤–∫–∞: ${distanceData.deliveryDistance} –∫–º √ó ${params.fuelConsumption}–ª/100–∫–º = ${deliveryFuel.toFixed(1)}–ª = ${deliveryCostConverted.toFixed(0)} ${params.baseCurrency}`);
    console.log(`  üöö –ü–µ—Ä–µ—ó–∑–¥–∏: ${distanceData.repositioningDistance} –∫–º √ó ${params.fuelConsumption}–ª/100–∫–º = ${repositioningFuel.toFixed(1)}–ª = ${repositioningCostConverted.toFixed(0)} ${params.baseCurrency}`);
    console.log(`  üéØ –ó–∞–≥–∞–ª–æ–º: ${distanceData.totalDistance} –∫–º = ${totalFuel.toFixed(1)}–ª = ${totalCost.toFixed(0)} ${params.baseCurrency}`);
    
    return {
      total: totalCost,
      delivery: deliveryCostConverted,
      repositioning: repositioningCostConverted
    };
  }

  /**
   * –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –¥–æ–±–æ–≤—ñ –≤–∏—Ç—Ä–∞—Ç–∏
   */
  private calculateDailyCosts(params: RouteCalculationParams): number {
    const dailyCostInOriginalCurrency = params.dailyRate * params.tripDays;
    
    return this.convertCurrency(
      dailyCostInOriginalCurrency,
      params.dailyRateCurrency,
      params.baseCurrency,
      params.exchangeRates
    );
  }

  /**
   * –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –∑–∞—Ä–ø–ª–∞—Ç—É –≤–æ–¥—ñ—è
   */
  private calculateDriverSalary(
    totalFreight: number,
    params: RouteCalculationParams
  ): number {
    const basePercentage = params.driverSalaryPercentage;
    // –Ø–∫—â–æ —á–∞—Å—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, –∑–º–µ–Ω—à—É—î–º–æ –≤—ñ–¥—Å–æ—Ç–æ–∫ –Ω–∞ 20%
    const adjustedPercentage = params.isFullLoad ? basePercentage : basePercentage * 0.8;
    
    return (totalFreight * adjustedPercentage) / 100;
  }

  /**
   * –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –≤–∏—Ç—Ä–∞—Ç–∏
   */
  private calculateAdditionalCosts(params: RouteCalculationParams): number {
    const { additionalCosts } = params;
    const totalAdditionalInOriginalCurrency = 
      additionalCosts.parking + 
      additionalCosts.tolls + 
      additionalCosts.other;
    
    return this.convertCurrency(
      totalAdditionalInOriginalCurrency,
      params.additionalCostsCurrency,
      params.baseCurrency,
      params.exchangeRates
    );
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
   */
  public async calculate(
    cargo: CargoItem[], 
    params: RouteCalculationParams
  ): Promise<CalculationResult> {
    // –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    const distanceData = await this.calculateTotalDistance(cargo);
    const totalWeight = cargo.reduce((sum, item) => sum + item.weight, 0);
    const totalVolume = cargo.reduce((sum, item) => sum + item.volume, 0);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤—Å—ñ —Ñ—Ä–∞—Ö—Ç–∏ –≤ –±–∞–∑–æ–≤—É –≤–∞–ª—é—Ç—É
    const totalFreight = cargo.reduce((sum, item) => {
      const freightInBaseCurrency = this.convertCurrency(
        item.freight,
        item.currency,
        params.baseCurrency,
        params.exchangeRates
      );
      return sum + freightInBaseCurrency;
    }, 0);

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏—Ç—Ä–∞—Ç
    const fuelCosts = this.calculateFuelCosts(distanceData, params);
    const dailyCosts = this.calculateDailyCosts(params);
    const driverSalary = this.calculateDriverSalary(totalFreight, params);
    const additionalCosts = this.calculateAdditionalCosts(params);
    
    const totalCosts = fuelCosts.total + dailyCosts + driverSalary + additionalCosts;

    // –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
    const grossProfit = totalFreight - totalCosts;
    const netProfit = grossProfit; // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø–æ–¥–∞—Ç–∫–∏ –ø—ñ–∑–Ω—ñ—à–µ
    const profitMargin = totalFreight > 0 ? (netProfit / totalFreight) * 100 : 0;
    const costPerKm = distanceData.totalDistance > 0 ? totalCosts / distanceData.totalDistance : 0;
    const revenuePerKm = distanceData.totalDistance > 0 ? totalFreight / distanceData.totalDistance : 0;

    // –î–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∏—Ç—Ä–∞—Ç (—É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö)
    const costBreakdown = {
      fuel: {
        amount: fuelCosts.total,
        percentage: totalCosts > 0 ? (fuelCosts.total / totalCosts) * 100 : 0,
        details: {
          delivery: fuelCosts.delivery,
          repositioning: fuelCosts.repositioning,
          totalLiters: (distanceData.totalDistance / 100) * params.fuelConsumption,
          deliveryLiters: (distanceData.deliveryDistance / 100) * params.fuelConsumption,
          repositioningLiters: (distanceData.repositioningDistance / 100) * params.fuelConsumption,
          pricePerLiter: params.fuelPrice,
          currency: params.fuelCurrency
        }
      },
      driver: {
        amount: driverSalary,
        percentage: totalCosts > 0 ? (driverSalary / totalCosts) * 100 : 0,
        details: {
          basePercentage: params.driverSalaryPercentage,
          adjustedPercentage: params.isFullLoad ? params.driverSalaryPercentage : params.driverSalaryPercentage * 0.8,
          isFullLoad: params.isFullLoad,
          totalFreight: totalFreight
        }
      },
      daily: {
        amount: dailyCosts,
        percentage: totalCosts > 0 ? (dailyCosts / totalCosts) * 100 : 0,
        details: {
          ratePerDay: params.dailyRate,
          numberOfDays: params.tripDays,
          currency: params.dailyRateCurrency,
          originalAmount: params.dailyRate * params.tripDays
        }
      },
      additional: {
        amount: additionalCosts,
        percentage: totalCosts > 0 ? (additionalCosts / totalCosts) * 100 : 0,
        details: {
          parking: params.additionalCosts.parking,
          tolls: params.additionalCosts.tolls,
          other: params.additionalCosts.other,
          currency: params.additionalCostsCurrency,
          totalInOriginalCurrency: params.additionalCosts.parking + params.additionalCosts.tolls + params.additionalCosts.other
        }
      }
    };

    return {
      totalDistance: distanceData.totalDistance,
      distanceBreakdown: {
        deliveryDistance: distanceData.deliveryDistance,
        repositioningDistance: distanceData.repositioningDistance
      },
      totalWeight,
      totalVolume,
      totalFreight,
      costs: {
        fuel: fuelCosts.total,
        driver: driverSalary,
        daily: dailyCosts,
        additional: additionalCosts,
        total: totalCosts
      },
      grossProfit,
      netProfit,
      profitMargin,
      costPerKm,
      revenuePerKm,
      costBreakdown
    };
  }

  /**
   * –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –æ–ø—Ç–∏–º–∞–ª—å–Ω—É —Ü—ñ–Ω—É —Ñ—Ä–∞—Ö—Ç—É –¥–ª—è –∑–∞–¥–∞–Ω–æ—ó –º–∞—Ä–∂—ñ
   */
  public async calculateOptimalFreight(
    cargo: CargoItem[],
    params: RouteCalculationParams,
    desiredMargin: number // %
  ): Promise<number> {
    const tempParams = { ...params };
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ—Ä–∞—Ö—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏—Ç—Ä–∞—Ç
    const tempCargo = cargo.map(item => ({ ...item, freight: 1000, currency: params.baseCurrency as 'UAH' | 'EUR' | 'USD' }));
    
    const tempResult = await this.calculate(tempCargo, tempParams);
    const totalCosts = tempResult.costs.total;
    
    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Ñ—Ä–∞—Ö—Ç –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –±–∞–∂–∞–Ω–æ—ó –º–∞—Ä–∂—ñ
    const requiredFreight = totalCosts / (1 - desiredMargin / 100);
    
    return requiredFreight;
  }
}

export const routeCalculator = new RouteCalculator(); 