import axios from 'axios';

export interface CityCoordinates {
  lat: number;
  lng: number;
  displayName: string;
  country: string;
}

// –ö–µ—à –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º—ñ—Å—Ç
const coordinatesCache = new Map<string, CityCoordinates>();

/**
 * –û—Ç—Ä–∏–º—É—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –º—ñ—Å—Ç–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Nominatim API (OpenStreetMap)
 */
export async function getCityCoordinates(cityName: string): Promise<CityCoordinates | null> {
  const normalizedCity = cityName.toLowerCase().trim();
  
  console.log(`üîç Searching coordinates for: ${cityName}`);
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
  if (coordinatesCache.has(normalizedCity)) {
    console.log(`üìç Found in cache: ${cityName}`);
    return coordinatesCache.get(normalizedCity)!;
  }
  
  try {
    // –ó–∞–ø–∏—Ç –¥–æ Nominatim API
    const response = await axios.get('https://nominatim.openstreetmap.org/search', {
      params: {
        q: cityName,
        format: 'json',
        limit: 1,
        addressdetails: 1,
        'accept-language': 'uk,en'
      },
      timeout: 5000,
      headers: {
        'User-Agent': 'EuroTandemFORCE-Logistics-App/1.0'
      }
    });
    
    if (response.data && response.data.length > 0) {
      const result = response.data[0];
      const coordinates: CityCoordinates = {
        lat: parseFloat(result.lat),
        lng: parseFloat(result.lon),
        displayName: result.display_name,
        country: result.address?.country || 'Unknown'
      };
      
      console.log(`‚úÖ Found coordinates for ${cityName}:`, {
        lat: coordinates.lat,
        lng: coordinates.lng,
        country: coordinates.country
      });
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
      coordinatesCache.set(normalizedCity, coordinates);
      
      return coordinates;
    }
  } catch (error) {
    console.warn(`‚ùå Geocoding error for ${cityName}:`, error);
  }
  
  console.warn(`üö´ Could not find coordinates for: ${cityName}`);
  return null;
}

/**
 * –û—Ç—Ä–∏–º—É—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç—É (–≤—ñ–¥ —Ç–∞ –¥–æ)
 */
export async function getRouteCoordinates(fromCity: string, toCity: string): Promise<{
  from: CityCoordinates | null;
  to: CityCoordinates | null;
}> {
  console.log(`üó∫Ô∏è Getting route coordinates: ${fromCity} ‚Üí ${toCity}`);
  
  const [from, to] = await Promise.all([
    getCityCoordinates(fromCity),
    getCityCoordinates(toCity)
  ]);
  
  return { from, to };
}

/**
 * –û—á–∏—â–∞—î –∫–µ—à –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
 */
export function clearCoordinatesCache(): void {
  coordinatesCache.clear();
  console.log('üßπ Coordinates cache cleared');
} 